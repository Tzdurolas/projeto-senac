console.log('üöÄ Verificador de Not√≠cias - Vers√£o Otimizada');

class NewsVerifier {
    constructor() {
        this.patterns = this.initializePatterns();
        this.domains = this.initializeDomains();
        this.events = this.initializeEvents();
    }

    initializePatterns() {
        return {
            manipulative: [
                { regex: /\b(urgente|bomba|alerta).{0,20}(compartilhe|divulgue)/gi, penalty: 25, desc: "Urg√™ncia + compartilhamento" },
                { regex: /\b(m√≠dia|imprensa).{0,30}(esconde|omite|silencia)/gi, penalty: 20, desc: "Teoria conspirat√≥ria" },
                { regex: /\b(governo|sistema).{0,30}(mente|engana|controla)/gi, penalty: 18, desc: "Conspira√ß√£o governamental" },
                { regex: /\b(verdade|realidade).{0,20}(oculta|escondida|proibida)/gi, penalty: 15, desc: "Verdade oculta" }
            ],
            medical: [
                { regex: /\b(cura|curar).{0,30}(c√¢ncer|aids|diabetes|covid)/gi, penalty: 35, desc: "Cura milagrosa" },
                { regex: /\b(vacinas?).{0,30}(mata|causam|provocam).{0,20}(autismo|morte)/gi, penalty: 40, desc: "Desinforma√ß√£o vacinal" },
                { regex: /\b(rem√©dio|tratamento).{0,20}(caseiro|natural).{0,20}(cura|resolve)/gi, penalty: 25, desc: "Tratamento caseiro milagroso" }
            ],
            academic: [
                { regex: /\b(universidade|usp|professor|doutor|pesquisa|estudo)/gi, bonus: 20, desc: "Fonte acad√™mica" },
                { regex: /\b(minist√©rio|anvisa|fiocruz|who|oms)/gi, bonus: 25, desc: "Institui√ß√£o oficial" },
                { regex: /\b(segundo|conforme|dados mostram|evid√™ncia)/gi, bonus: 15, desc: "Linguagem cient√≠fica" }
            ],
            temporal: [
                { regex: /\b(hoje|agora|neste momento|atualmente)/gi, bonus: 22, desc: "Atualidade imediata" },
                { regex: /\b(ontem|anteontem|h√° [1-3] dias?)/gi, bonus: 18, desc: "Muito recente" },
                { regex: /\b(esta semana|semana passada)/gi, bonus: 14, desc: "Refer√™ncia semanal" },
                { regex: /\b(este m√™s|m√™s passado)/gi, bonus: 12, desc: "Refer√™ncia mensal" },
                { regex: /\b(2024|este ano)/gi, bonus: 10, desc: "Ano atual" },
                { regex: /\b(2023|ano passado)/gi, bonus: 8, desc: "Ano anterior" }
            ],
            deadPeople: [
                // Brasileiros famosos mortos
                { regex: /\b(ayrton senna).{0,30}(vivo|n√£o morreu|sobreviveu|est√° bem|foi visto)/gi, penalty: 45, desc: "Ayrton Senna (morreu em 1994)" },
                { regex: /\b(tom jobim|ant√¥nio carlos jobim).{0,30}(vivo|n√£o morreu|novo √°lbum|nova m√∫sica)/gi, penalty: 40, desc: "Tom Jobim (morreu em 1994)" },
                { regex: /\b(cazuza).{0,30}(vivo|n√£o morreu|novo show|turn√™)/gi, penalty: 40, desc: "Cazuza (morreu em 1990)" },
                { regex: /\b(renato russo).{0,30}(vivo|n√£o morreu|legi√£o urbana volta)/gi, penalty: 40, desc: "Renato Russo (morreu em 1996)" },
                { regex: /\b(chor√£o|alexandre magno abr√£o).{0,30}(vivo|n√£o morreu|charlie brown jr)/gi, penalty: 35, desc: "Chor√£o (morreu em 2013)" },
                { regex: /\b(paulo gustavo).{0,30}(vivo|n√£o morreu|se recuperou|covid)/gi, penalty: 35, desc: "Paulo Gustavo (morreu em 2021)" },
                { regex: /\b(mar√≠lia mendon√ßa).{0,30}(viva|n√£o morreu|novo show|acidente falso)/gi, penalty: 35, desc: "Mar√≠lia Mendon√ßa (morreu em 2021)" },
                { regex: /\b(gugu liberato).{0,30}(vivo|n√£o morreu|volta √† tv)/gi, penalty: 30, desc: "Gugu Liberato (morreu em 2019)" },

                // Criminosos brasileiros mortos
                { regex: /\b(l√°zaro|lazaro barbosa).{0,30}(vivo|n√£o morreu|foi preso|se escondeu)/gi, penalty: 50, desc: "L√°zaro Barbosa (morreu em 2021)" },
                { regex: /\b(fernandinho beira.?mar).{0,30}(vivo|n√£o morreu|fugiu|se escondeu)/gi, penalty: 45, desc: "Fernandinho Beira-Mar (morreu em 2016)" },

                // Internacionais famosos
                { regex: /\b(michael jackson).{0,30}(vivo|n√£o morreu|fingiu|se escondeu)/gi, penalty: 40, desc: "Michael Jackson (morreu em 2009)" },
                { regex: /\b(elvis presley|elvis).{0,30}(vivo|n√£o morreu|fingiu|foi visto)/gi, penalty: 40, desc: "Elvis Presley (morreu em 1977)" },
                { regex: /\b(john lennon).{0,30}(vivo|n√£o morreu|beatles reuni√£o)/gi, penalty: 40, desc: "John Lennon (morreu em 1980)" },
                { regex: /\b(freddie mercury).{0,30}(vivo|n√£o morreu|queen volta|aids curado)/gi, penalty: 40, desc: "Freddie Mercury (morreu em 1991)" },
                { regex: /\b(kurt cobain).{0,30}(vivo|n√£o morreu|nirvana volta|fingiu)/gi, penalty: 40, desc: "Kurt Cobain (morreu em 1994)" },
                { regex: /\b(tupac|2pac).{0,30}(vivo|n√£o morreu|fingiu|cuba)/gi, penalty: 35, desc: "Tupac Shakur (morreu em 1996)" },
                { regex: /\b(biggie|notorious big).{0,30}(vivo|n√£o morreu|fingiu)/gi, penalty: 35, desc: "Notorious B.I.G. (morreu em 1997)" },
                { regex: /\b(paul walker).{0,30}(vivo|n√£o morreu|acidente falso)/gi, penalty: 30, desc: "Paul Walker (morreu em 2013)" },
                { regex: /\b(robin williams).{0,30}(vivo|n√£o morreu|depress√£o curada)/gi, penalty: 30, desc: "Robin Williams (morreu em 2014)" },
                { regex: /\b(kobe bryant).{0,30}(vivo|n√£o morreu|acidente falso)/gi, penalty: 35, desc: "Kobe Bryant (morreu em 2020)" },
                { regex: /\b(diego maradona).{0,30}(vivo|n√£o morreu|se recuperou)/gi, penalty: 30, desc: "Diego Maradona (morreu em 2020)" },

                // L√≠deres hist√≥ricos
                { regex: /\b(hitler|adolf hitler).{0,30}(vivo|n√£o morreu|argentina|fugiu)/gi, penalty: 50, desc: "Adolf Hitler (morreu em 1945)" },
                { regex: /\b(stalin|josef stalin).{0,30}(vivo|n√£o morreu|sib√©ria)/gi, penalty: 45, desc: "Josef Stalin (morreu em 1953)" },
                { regex: /\b(che guevara).{0,30}(vivo|n√£o morreu|cuba|bol√≠via)/gi, penalty: 40, desc: "Che Guevara (morreu em 1967)" },
                { regex: /\b(john kennedy|jfk).{0,30}(vivo|n√£o morreu|fingiu|dallas)/gi, penalty: 45, desc: "John F. Kennedy (morreu em 1963)" },
                { regex: /\b(martin luther king).{0,30}(vivo|n√£o morreu|fingiu)/gi, penalty: 40, desc: "Martin Luther King (morreu em 1968)" },

                // Realeza
                { regex: /\b(princesa diana|lady diana).{0,30}(viva|n√£o morreu|fingiu|paris)/gi, penalty: 40, desc: "Princesa Diana (morreu em 1997)" },
                { regex: /\b(rainha elizabeth|elizabeth ii).{0,30}(viva|n√£o morreu|se recuperou)/gi, penalty: 35, desc: "Rainha Elizabeth II (morreu em 2022)" },

                // Cientistas e pensadores
                { regex: /\b(stephen hawking).{0,30}(vivo|n√£o morreu|se recuperou|ela)/gi, penalty: 35, desc: "Stephen Hawking (morreu em 2018)" },
                { regex: /\b(albert einstein).{0,30}(vivo|n√£o morreu|nova teoria)/gi, penalty: 45, desc: "Albert Einstein (morreu em 1955)" }
            ],
            historicalFacts: [
                // Eventos hist√≥ricos brasileiros
                { regex: /\b(get√∫lio vargas).{0,30}(ainda presidente|n√£o se suicidou|vivo)/gi, penalty: 45, desc: "Get√∫lio Vargas (suicidou-se em 1954)" },
                { regex: /\b(tancredo neves).{0,30}(assumiu presid√™ncia|n√£o morreu|se recuperou)/gi, penalty: 40, desc: "Tancredo Neves (morreu antes de assumir em 1985)" },
                { regex: /\b(juscelino kubitschek|jk).{0,30}(vivo|n√£o morreu|acidente falso)/gi, penalty: 35, desc: "Juscelino Kubitschek (morreu em 1976)" },

                // Eventos mundiais
                { regex: /\b(segunda guerra|guerra mundial).{0,30}(n√£o aconteceu|fake|mentira)/gi, penalty: 50, desc: "Segunda Guerra Mundial (1939-1945)" },
                { regex: /\b(holocausto).{0,30}(n√£o aconteceu|fake|mentira|exagerado)/gi, penalty: 50, desc: "Holocausto (negacionismo)" },
                { regex: /\b(homem na lua|neil armstrong).{0,30}(fake|mentira|est√∫dio|n√£o aconteceu)/gi, penalty: 40, desc: "Chegada √† Lua (1969)" },
                { regex: /\b(11 de setembro|torres g√™meas).{0,30}(inside job|governo americano|fake)/gi, penalty: 35, desc: "11 de Setembro (teoria conspirat√≥ria)" },
                { regex: /\b(titanic).{0,30}(n√£o afundou|fake|seguro|proposital)/gi, penalty: 30, desc: "Naufr√°gio do Titanic (1912)" },

                // Eventos recentes como hist√≥ricos
                { regex: /\b(covid|pandemia).{0,30}(n√£o existiu|fake|laborat√≥rio|planejada)/gi, penalty: 35, desc: "Pandemia COVID-19 (negacionismo)" },
                { regex: /\b(vacinas covid).{0,30}(chip|5g|controle|bill gates)/gi, penalty: 40, desc: "Teorias conspirat√≥rias sobre vacinas" },

                // Descobertas cient√≠ficas
                { regex: /\b(evolu√ß√£o|darwin).{0,30}(fake|mentira|n√£o existe|teoria falsa)/gi, penalty: 35, desc: "Teoria da Evolu√ß√£o (negacionismo cient√≠fico)" },
                { regex: /\b(aquecimento global|mudan√ßa clim√°tica).{0,30}(fake|mentira|n√£o existe)/gi, penalty: 30, desc: "Mudan√ßas clim√°ticas (negacionismo)" },
                { regex: /\b(terra plana|flat earth).{0,30}(verdade|comprovado|nasa mente)/gi, penalty: 45, desc: "Terra plana (teoria conspirat√≥ria)" },

                // Eventos brasileiros espec√≠ficos
                { regex: /\b(diretas j√°).{0,30}(n√£o aconteceu|fake|pequeno)/gi, penalty: 30, desc: "Movimento Diretas J√° (1984)" },
                { regex: /\b(impeachment collor).{0,30}(n√£o aconteceu|golpe|fake)/gi, penalty: 25, desc: "Impeachment de Collor (1992)" },
                { regex: /\b(morte do senna).{0,30}(assassinato|sabotagem|n√£o foi acidente)/gi, penalty: 35, desc: "Morte de Ayrton Senna (teorias conspirat√≥rias)" }
            ]
        };
    }

    initializeDomains() {
        return {
            trusted: {
                'nature.com': 35, 'science.org': 35, 'usp.br': 25, 'gov.br': 22,
                'bbc.com': 22, 'reuters.com': 24, 'folha.uol.com.br': 17,
                'aosfatos.org': 26, 'lupa.uol.com.br': 23
            },
            suspicious: {
                'blogspot.com': -10, 'wordpress.com': -8, 'facebook.com': -8,
                'whatsapp.com': -18, 'telegram.me': -15
            }
        };
    }

    initializeEvents() {
        return {
            2024: [
                { regex: /\b(elei√ß√µes municipais 2024|segundo turno 2024)/gi, bonus: 20, desc: 'Elei√ß√µes 2024' },
                { regex: /\b(olimp√≠adas paris|paris 2024)/gi, bonus: 18, desc: 'Olimp√≠adas Paris 2024' },
                { regex: /\b(chatgpt 4|claude 3|ia 2024)/gi, bonus: 15, desc: 'IA 2024' },
                { regex: /\b(biden 2024|trump 2024|elei√ß√µes eua)/gi, bonus: 15, desc: 'Elei√ß√µes EUA 2024' }
            ],
            2023: [
                { regex: /\b(posse lula|janeiro 2023)/gi, bonus: 15, desc: 'Posse Lula 2023' },
                { regex: /\b(8 de janeiro|invas√£o bras√≠lia)/gi, bonus: 18, desc: '8 de Janeiro 2023' },
                { regex: /\b(fim da pandemia|maio 2023)/gi, bonus: 16, desc: 'Fim da pandemia 2023' }
            ]
        };
    }

    analyzeDomain(url) {
        if (!url) return 0;
        
        try {
            const domain = new URL(url).hostname.toLowerCase();
            
            for (const [trustedDomain, bonus] of Object.entries(this.domains.trusted)) {
                if (domain.includes(trustedDomain)) return bonus;
            }
            
            for (const [suspiciousDomain, penalty] of Object.entries(this.domains.suspicious)) {
                if (domain.includes(suspiciousDomain)) return penalty;
            }
            
            if (domain.includes('.edu')) return 20;
            if (domain.includes('.gov')) return 25;
            if (domain.includes('.org')) return 8;
            
            return 0;
        } catch {
            return -5;
        }
    }

    analyzePatterns(text, patternGroup) {
        const results = { score: 0, detections: [] };
        
        patternGroup.forEach(({ regex, bonus, penalty, desc }) => {
            const matches = text.match(regex);
            if (matches) {
                const adjustment = bonus || -penalty;
                results.score += adjustment;
                results.detections.push(`${desc} (${matches.length}x)`);
            }
        });
        
        return results;
    }

    analyzeEvents(text) {
        const results = { score: 0, detections: [] };
        
        Object.entries(this.events).forEach(([year, events]) => {
            events.forEach(({ regex, bonus, desc }) => {
                const matches = text.match(regex);
                if (matches) {
                    results.score += bonus;
                    results.detections.push(`${desc} (${year})`);
                }
            });
        });
        
        return results;
    }

    analyze(text, url) {
        console.log('üß† Iniciando an√°lise otimizada...');
        
        if (!text && !url) {
            return { score: 0, issues: ['Nenhum conte√∫do fornecido'], positives: [] };
        }

        let score = 50;
        const issues = [];
        const positives = [];

        const manipulativeResult = this.analyzePatterns(text, this.patterns.manipulative);
        score += manipulativeResult.score;
        manipulativeResult.detections.forEach(detection => issues.push(`üé≠ MANIPULA√á√ÉO: ${detection}`));

        const medicalResult = this.analyzePatterns(text, this.patterns.medical);
        score += medicalResult.score;
        medicalResult.detections.forEach(detection => issues.push(`‚öïÔ∏è DESINFORMA√á√ÉO M√âDICA: ${detection}`));

        const academicResult = this.analyzePatterns(text, this.patterns.academic);
        score += academicResult.score;
        academicResult.detections.forEach(detection => positives.push(`üéì FONTE ACAD√äMICA: ${detection}`));

        const temporalResult = this.analyzePatterns(text, this.patterns.temporal);
        score += temporalResult.score;
        temporalResult.detections.forEach(detection => positives.push(`üìÖ TEMPORAL: ${detection}`));

        const eventsResult = this.analyzeEvents(text);
        score += eventsResult.score;
        eventsResult.detections.forEach(detection => positives.push(`üåç EVENTO ATUAL: ${detection}`));

        // An√°lise de pessoas mortas
        const deadPeopleResult = this.analyzePatterns(text, this.patterns.deadPeople);
        score += deadPeopleResult.score;
        deadPeopleResult.detections.forEach(detection => issues.push(`üíÄ PESSOA MORTA: ${detection}`));

        // An√°lise de fatos hist√≥ricos
        const historicalResult = this.analyzePatterns(text, this.patterns.historicalFacts);
        score += historicalResult.score;
        historicalResult.detections.forEach(detection => issues.push(`üìö FATO HIST√ìRICO NEGADO: ${detection}`));

        const domainScore = this.analyzeDomain(url);
        score += domainScore;
        if (domainScore > 0) {
            positives.push(`‚úÖ DOM√çNIO CONFI√ÅVEL: +${domainScore} pontos`);
        } else if (domainScore < 0) {
            issues.push(`‚ö†Ô∏è DOM√çNIO SUSPEITO: ${domainScore} pontos`);
        }

        // An√°lise de contexto avan√ßada
        const contextResult = this.analyzeAdvancedContext(text);
        score += contextResult.score;
        contextResult.issues.forEach(issue => issues.push(issue));
        contextResult.positives.forEach(positive => positives.push(positive));

        // An√°lise de n√∫meros suspeitos
        const numbersResult = this.analyzeSuspiciousNumbers(text);
        score += numbersResult.score;
        numbersResult.issues.forEach(issue => issues.push(issue));

        // An√°lise de linguagem emocional
        const emotionalResult = this.analyzeEmotionalLanguage(text);
        score += emotionalResult.score;
        emotionalResult.issues.forEach(issue => issues.push(issue));

        score = Math.max(0, Math.min(100, score));

        console.log('üìä An√°lise conclu√≠da. Score:', score);
        console.log(`üîç Detectados: ${issues.length} problemas, ${positives.length} aspectos positivos`);
        return { score, issues, positives };
    }

    analyzeAdvancedContext(text) {
        const issues = [];
        const positives = [];
        let score = 0;

        // Detec√ß√£o de clickbait
        const clickbaitPatterns = [
            /\b(voc√™ n√£o vai acreditar|m√©dicos odeiam|dentistas odeiam)/gi,
            /\b(este truque|este segredo|esta descoberta).{0,20}(vai|ir√°).{0,20}(chocar|surpreender)/gi,
            /\b(clique aqui|veja mais|saiba mais).{0,20}(para descobrir|para saber)/gi,
            /\b(n√∫mero \d+).{0,20}(vai te|ir√° te|te deixar√°).{0,20}(chocar|impressionar)/gi
        ];

        clickbaitPatterns.forEach(pattern => {
            if (pattern.test(text)) {
                score -= 20;
                issues.push('üé£ CLICKBAIT: Padr√£o de clickbait detectado');
            }
        });

        // Detec√ß√£o de urg√™ncia artificial
        const urgencyPatterns = [
            /\b(antes que seja tarde|√∫ltima chance|oportunidade √∫nica)/gi,
            /\b(apenas hoje|s√≥ hoje|por tempo limitado)/gi,
            /\b(corre|r√°pido|urgente).{0,20}(antes que|para n√£o)/gi
        ];

        urgencyPatterns.forEach(pattern => {
            if (pattern.test(text)) {
                score -= 15;
                issues.push('‚è∞ URG√äNCIA ARTIFICIAL: Cria√ß√£o de senso de urg√™ncia');
            }
        });

        // Detec√ß√£o de linguagem cient√≠fica leg√≠tima
        const scientificPatterns = [
            /\b(metodologia|amostra|estatisticamente significativo|peer.?review)/gi,
            /\b(meta.?an√°lise|ensaio cl√≠nico|randomizado|duplo.?cego)/gi,
            /\b(correla√ß√£o|causalidade|hip√≥tese|vari√°vel dependente)/gi,
            /\b(doi:|issn:|isbn:|\d{4}\.\d{4})/gi
        ];

        scientificPatterns.forEach(pattern => {
            const matches = text.match(pattern);
            if (matches) {
                score += 15;
                positives.push(`üî¨ LINGUAGEM CIENT√çFICA: Terminologia t√©cnica (${matches.length}x)`);
            }
        });

        // Detec√ß√£o de fontes espec√≠ficas
        const sourcePatterns = [
            /\b(segundo|conforme|de acordo com)\s+(dr\.|dra\.|professor|pesquisador)\s+\w+/gi,
            /\b(estudo publicado|pesquisa da|dados do)\s+(universidade|instituto)/gi,
            /\b(relat√≥rio|documento|declara√ß√£o)\s+(oficial|governamental)/gi
        ];

        sourcePatterns.forEach(pattern => {
            const matches = text.match(pattern);
            if (matches) {
                score += 18;
                positives.push(`üìö FONTE ESPEC√çFICA: Cita√ß√£o detalhada (${matches.length}x)`);
            }
        });

        return { score, issues, positives };
    }

    analyzeSuspiciousNumbers(text) {
        const issues = [];
        let score = 0;

        // N√∫meros imposs√≠veis ou exagerados
        const suspiciousPatterns = [
            { regex: /\b(9[5-9]|100)% dos? (m√©dicos?|cientistas?|especialistas?)/gi, penalty: 30, desc: "Consenso imposs√≠vel de profissionais" },
            { regex: /\b(milh√µes?|bilh√µes?).{0,20}(morr|mort|√≥bit)/gi, penalty: 25, desc: "N√∫meros de mortes exagerados" },
            { regex: /\b([2-9]\d{2,}|[1-9]\d{3,})%.{0,20}(aumento|crescimento|efic√°cia)/gi, penalty: 25, desc: "Porcentagens imposs√≠veis" },
            { regex: /\b(zero|0).{0,10}(casos?|mortes?|efeitos?).{0,20}(colaterais?|adversos?)/gi, penalty: 20, desc: "Zero casos suspeito" },
            { regex: /\b(todos?|100%).{0,20}(m√©dicos?|cientistas?).{0,20}(concordam|afirmam)/gi, penalty: 25, desc: "Unanimidade imposs√≠vel" }
        ];

        suspiciousPatterns.forEach(({ regex, penalty, desc }) => {
            const matches = text.match(regex);
            if (matches) {
                score -= penalty;
                issues.push(`üìä N√öMEROS SUSPEITOS: ${desc} (${matches.length}x)`);
            }
        });

        return { score, issues };
    }

    analyzeEmotionalLanguage(text) {
        const issues = [];
        let score = 0;

        // Palavras emocionais extremas
        const emotionalWords = [
            '√≥dio', 'raiva', 'terror', 'p√¢nico', 'absurdo', 'inaceit√°vel',
            'revoltante', 'indignante', 'chocante', 'horr√≠vel', 'terr√≠vel'
        ];

        const emotionalCount = emotionalWords.filter(word =>
            text.toLowerCase().includes(word)
        ).length;

        if (emotionalCount >= 3) {
            score -= 20;
            issues.push(`üò† LINGUAGEM EMOCIONAL: ${emotionalCount} palavras extremas detectadas`);
        } else if (emotionalCount >= 2) {
            score -= 10;
            issues.push(`üò† LINGUAGEM EMOCIONAL: ${emotionalCount} palavras extremas detectadas`);
        }

        // Detec√ß√£o de linguagem polarizadora
        const polarizingPatterns = [
            /\b(inimigo|traidor|vendido|corrupto|bandido)/gi,
            /\b(fascista|nazista|comunista|esquerdista|direitista)/gi,
            /\b(cidad√£o de bem|patriota|vagabundo|mortadela)/gi
        ];

        polarizingPatterns.forEach(pattern => {
            const matches = text.match(pattern);
            if (matches) {
                score -= 15;
                issues.push(`üé≠ LINGUAGEM POLARIZADA: Termos polarizadores (${matches.length}x)`);
            }
        });

        return { score, issues };
    }
}

const verifier = new NewsVerifier();

function verifyNews() {
    console.log('üîç Verificando not√≠cia...');
    
    const text = document.getElementById('newsText').value.trim();
    const url = document.getElementById('newsUrl').value.trim();
    const resultDiv = document.getElementById('result');
    
    if (!text && !url) {
        alert('Por favor, insira o texto da not√≠cia ou uma URL');
        return;
    }
    
    try {
        const analysis = verifier.analyze(text, url);
        displayResult(analysis);
    } catch (error) {
        console.error('‚ùå Erro na an√°lise:', error);
        resultDiv.innerHTML = `
            <div class="result result-false">
                <h3>‚ùå Erro na Verifica√ß√£o</h3>
                <p>Ocorreu um erro ao analisar a not√≠cia. Tente novamente.</p>
            </div>
        `;
    }
}

function displayResult(analysis) {
    const { score, issues, positives } = analysis;
    const resultDiv = document.getElementById('result');
    
    let resultClass, resultIcon, resultText, recommendation;
    
    if (score < 30) {
        resultClass = 'result-false';
        resultIcon = '‚ùå';
        resultText = 'FAKE NEWS';
        recommendation = 'üö® ALERTA M√ÅXIMO: Esta not√≠cia apresenta caracter√≠sticas t√≠picas de fake news. N√ÉO compartilhe.';
    } else if (score < 50) {
        resultClass = 'result-false';
        resultIcon = '‚ö†Ô∏è';
        resultText = 'SUSPEITA';
        recommendation = '‚ö†Ô∏è CUIDADO: Esta not√≠cia cont√©m elementos suspeitos. Verifique em outras fontes.';
    } else if (score < 70) {
        resultClass = 'result-neutral';
        resultIcon = 'ü§î';
        resultText = 'MODERADA';
        recommendation = 'ü§î MODERADA: Credibilidade moderada. Recomenda-se verificar em fontes oficiais.';
    } else if (score < 85) {
        resultClass = 'result-true';
        resultIcon = 'üëç';
        resultText = 'BOA';
        recommendation = 'üëç BOA: Esta not√≠cia parece confi√°vel, mas sempre verifique m√∫ltiplas fontes.';
    } else {
        resultClass = 'result-true';
        resultIcon = '‚úÖ';
        resultText = 'EXCELENTE';
        recommendation = '‚úÖ EXCELENTE: Alta credibilidade com fontes confi√°veis e linguagem apropriada.';
    }
    
    resultDiv.innerHTML = `
        <div class="result ${resultClass}">
            <h3>${resultIcon} An√°lise: ${resultText}</h3>
            <div class="score-circle">
                <span class="score-number">${score}%</span>
            </div>
            <div class="recommendation">
                <h4>üí° Recomenda√ß√£o:</h4>
                <p>${recommendation}</p>
            </div>
            <div class="analysis-details">
                <h4>üìä Detalhes da An√°lise:</h4>
                ${issues.length > 0 ? `
                    <div class="issues">
                        <h5>‚ö†Ô∏è Problemas Detectados (${issues.length}):</h5>
                        <ul>${issues.map(issue => `<li>${issue}</li>`).join('')}</ul>
                    </div>
                ` : ''}
                ${positives.length > 0 ? `
                    <div class="positives">
                        <h5>‚úÖ Aspectos Positivos (${positives.length}):</h5>
                        <ul>${positives.map(positive => `<li>${positive}</li>`).join('')}</ul>
                    </div>
                ` : ''}
            </div>
        </div>
    `;
}

function loadExample(type) {
    console.log('üìù Carregando exemplo:', type);

    const textArea = document.getElementById('newsText');
    const urlInput = document.getElementById('newsUrl');

    if (!textArea || !urlInput) {
        console.error('‚ùå Elementos n√£o encontrados');
        return;
    }

    const examples = {
        conspiracy: {
            text: "URGENTE!!! A M√çDIA ESCONDE A VERDADE! O governo mente para voc√™s! Eles n√£o querem que voc√™ saiba disso! COMPARTILHE ANTES QUE APAGUEM! A elite mundial controla tudo e voc√™s s√£o apenas fantoches! Meu primo que trabalha no governo me contou isso!",
            url: ""
        },
        medical_fake: {
            text: "M√âDICOS ODEIAM ESTE TRUQUE SIMPLES! Cura para o c√¢ncer descoberta por mulher de 60 anos! 100% dos pacientes foram curados em apenas 3 dias! A ind√∫stria farmac√™utica n√£o quer que voc√™ saiba! Receita caseira que resolve tudo!",
            url: ""
        },
        clickbait: {
            text: "VOC√ä N√ÉO VAI ACREDITAR NO QUE ACONTECEU! O que este homem descobriu vai CHOCAR voc√™! M√©dicos ficaram HORRORIZADOS com esta descoberta! Clique aqui para saber o SEGREDO que a ind√∫stria esconde!",
            url: ""
        },
        political: {
            text: "BOMBA! Urnas eletr√¥nicas foram fraudadas! 99% dos t√©cnicos confirmam manipula√ß√£o! O sistema est√° contra o povo! Ditadura do judici√°rio instalada! Compartilhe esta verdade que eles querem esconder!",
            url: ""
        },
        outdated: {
            text: "URGENTE! WhatsApp vai ser pago a partir de janeiro! A empresa anunciou que cobrar√° R$ 5,99 por m√™s! O coronav√≠rus √© uma nova doen√ßa misteriosa que surgiu na China! Hidroxicloroquina cura COVID-19! Trump ainda √© presidente dos EUA!",
            url: ""
        },
        scientific: {
            text: "Pesquisadores da Universidade de S√£o Paulo, em colabora√ß√£o com o MIT, publicaram hoje (15/12/2024) na revista Nature um estudo sobre novo tratamento para diabetes tipo 2. A pesquisa, conduzida pelo Dr. Jo√£o Silva com metodologia duplo-cego e grupo controle de 500 pacientes, demonstrou efic√°cia estatisticamente significativa.",
            url: "https://nature.com/articles/diabetes-treatment-2024"
        },
        official: {
            text: "O Minist√©rio da Sa√∫de, em parceria com a Anvisa e Fiocruz, divulgou ontem (14/12/2024) o relat√≥rio oficial sobre a campanha de vacina√ß√£o. Segundo dados do IBGE, foram aplicadas 2,3 milh√µes de doses na √∫ltima semana. A declara√ß√£o oficial foi feita pelo ministro durante entrevista coletiva.",
            url: "https://gov.br/saude/vacinacao-relatorio-2024"
        },
        academic: {
            text: "Estudo peer-reviewed conduzido pela Unicamp e publicado no The Lancet em dezembro de 2024 analisou 1.200 casos durante 18 meses. A metodologia incluiu meta-an√°lise de ensaios cl√≠nicos randomizados. Os resultados s√£o estatisticamente significativos, declarou a Dra. Maria Santos, professora titular.",
            url: "https://unicamp.br/pesquisa/lancet-2024"
        },
        journalism: {
            text: "Reportagem da BBC publicada hoje revela tend√™ncias na sa√∫de p√∫blica global baseada em entrevistas exclusivas com especialistas da OMS e dados oficiais do CDC de dezembro de 2024. O jornalista investigativo John Smith conduziu a investiga√ß√£o durante 6 meses.",
            url: "https://bbc.com/health/global-trends-2024"
        },
        recent: {
            text: "√öLTIMA HORA: Descoberta revolucion√°ria em intelig√™ncia artificial foi anunciada hoje (15/12/2024) pela OpenAI em parceria com universidades brasileiras. O novo modelo ChatGPT foi testado pela USP e Unicamp com resultados promissores. A tecnologia promete revolucionar a detec√ß√£o de fake news nas elei√ß√µes municipais 2024.",
            url: "https://openai.com/research/fake-news-detection-2024"
        },
        year_ago: {
            text: "An√°lise: Um ano ap√≥s a posse de Lula em janeiro de 2023, o governo brasileiro mostra resultados na economia. O PIB cresceu nos √∫ltimos 12 meses, segundo dados do IBGE divulgados este m√™s. A pol√≠tica de combate √† infla√ß√£o, iniciada no primeiro semestre de 2023, apresenta resultados positivos.",
            url: "https://g1.globo.com/economia/analise-governo-lula-2024"
        },
        scientific_advanced: {
            text: "Estudo peer-reviewed publicado na Nature (DOI: 10.1038/nature2024.123) demonstra efic√°cia de 87.3% (IC 95%: 82.1-92.5%) em ensaio cl√≠nico randomizado duplo-cego com n=2.847 participantes. A metodologia incluiu grupo controle com placebo, margem de erro de 3.2% e signific√¢ncia estat√≠stica p<0.001.",
            url: "https://nature.com/articles/advanced-treatment-2024"
        },
        geographic_context: {
            text: "Minist√©rio da Sa√∫de brasileiro anuncia parceria com SUS e Anvisa para implementa√ß√£o nacional do programa. A medida afeta 215 milh√µes de brasileiros e ser√° financiada com R$ 2,3 bilh√µes do or√ßamento federal. Estados como S√£o Paulo, Rio de Janeiro e Minas Gerais iniciam implementa√ß√£o em janeiro de 2024.",
            url: "https://gov.br/saude/programa-nacional-2024"
        },
        cross_reference: {
            text: "Conforme mencionado anteriormente, o estudo referenciado na p√°gina 45 do relat√≥rio oficial (dispon√≠vel em https://ibge.gov.br/relatorio2024) confirma os dados. Como citado pelo Dr. Silva, a metodologia descrita no artigo 12 da lei n¬∫ 14.123/2024 estabelece os par√¢metros.",
            url: "https://ibge.gov.br/relatorio2024"
        },
        dead_people: {
            text: "BOMBA! Ayrton Senna est√° vivo e foi visto em uma fazenda no interior! Michael Jackson n√£o morreu e est√° morando no Brasil! Paulo Gustavo se recuperou da COVID e vai voltar √† TV! Mar√≠lia Mendon√ßa fingiu a pr√≥pria morte! L√°zaro Barbosa n√£o morreu e continua fugindo! Compartilhe antes que apaguem!",
            url: ""
        },
        historical_facts: {
            text: "VERDADE OCULTA! A Segunda Guerra Mundial n√£o aconteceu! O Holocausto √© uma mentira! O homem nunca foi √† Lua, tudo foi filmado em est√∫dio! O 11 de setembro foi um inside job do governo americano! A Terra √© plana e a NASA mente! COVID-19 n√£o existe, foi inventado para controlar a popula√ß√£o!",
            url: ""
        },
        suspicious_numbers: {
            text: "COMPROVADO! 100% dos m√©dicos concordam que esta receita caseira cura c√¢ncer! 99% dos cientistas escondem esta verdade! Efic√°cia de 500% comprovada! Zero efeitos colaterais! Milh√µes de pessoas morreram por causa das vacinas! 1000% de aumento na imunidade!",
            url: ""
        }
    };

    const example = examples[type];
    if (example) {
        textArea.value = example.text;
        urlInput.value = example.url;
        console.log('‚úÖ Exemplo carregado:', type);
    } else {
        console.error('‚ùå Exemplo n√£o encontrado:', type);
    }
}

document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && e.ctrlKey) {
        verifyNews();
    }
});

console.log('‚úÖ Verificador otimizado carregado com sucesso!');
